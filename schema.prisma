// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Vehicle {
    id             Int                   @id @default(autoincrement())
    make           String
    model          String
    fuel           String
    transmission   String
    vehicleType    String
    seats          Int
    engine         Int
    color          String
    allowedMilage  Int
    year           Int
    published      Boolean               @default(true)
    ownerId        String
    availabilities VehicleAvailability[]
    images         String[]
    VehicleBooking VehicleBooking[]
    pricePerDay    Float

    locationPostcode     String
    locationAddressLine1 String
    locationAddressLine2 String?
    locationLong         Float
    locationLat          Float

    createdDate   DateTime @default(now())
    adminApproved Boolean  @default(false)
}

model VehicleAvailability {
    id          String   @id @default(cuid())
    from        DateTime
    to          DateTime
    vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
    vehicleId   Int?
    createdDate DateTime @default(now())
}

model VehicleBooking {
    id                                    String                  @id @default(cuid())
    bookingFrom                           DateTime
    bookingTo                             DateTime
    vehicle                               Vehicle?                @relation(fields: [vehicleId], references: [id])
    vehicleId                             Int?
    bookingUserId                         String
    bookingUserFirstName                  String
    bookingUserLastName                   String
    bookingUserContactNo                  String
    bookingUserAddressPostCode            String
    bookingUserAddressLine1               String
    bookingUserAddressLine2               String
    bookingUserAddressCity                String
    bookingUserAddressCountry             String
    bookingUserDrivingLicenseNo           String
    bookingUserDrivingLicenseIssueCountry String
    bookingUserDrivingLicensePhoto        String[]
    bookingUserEmergencyContactPhone      String
    bookingUserEmergencyContactName       String
    PaymentCardNo                         String
    PaymentCardName                       String
    PaymentCardExp                        String
    PaymentCardSecret                     String
    invoiceSubTotal                       Float
    invoiceTax                            Float
    invoiceTotal                          Float
    createdDate                           DateTime                @default(now())
    VehicleBookingMessage                 VehicleBookingMessage[]
}

model VehicleBookingMessage {
    id               String          @id @default(cuid())
    vehicleBooking   VehicleBooking? @relation(fields: [vehicleBookingId], references: [id])
    vehicleBookingId String
    message          String
    userId           String
    userDisplayName  String
    createdDate      DateTime        @default(now())
}
